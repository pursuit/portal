// Code generated by MockGen. DO NOT EDIT.
// Source: mutation.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	repo "github.com/pursuit/portal/internal/repo"
)

// MockMutation is a mock of Mutation interface.
type MockMutation struct {
	ctrl     *gomock.Controller
	recorder *MockMutationMockRecorder
}

// MockMutationMockRecorder is the mock recorder for MockMutation.
type MockMutationMockRecorder struct {
	mock *MockMutation
}

// NewMockMutation creates a new mock instance.
func NewMockMutation(ctrl *gomock.Controller) *MockMutation {
	mock := &MockMutation{ctrl: ctrl}
	mock.recorder = &MockMutationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutation) EXPECT() *MockMutationMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMutation) Create(ctx context.Context, db repo.DB, userID, referenceID int, referenceType string, amount int, createdAt time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, db, userID, referenceID, referenceType, amount, createdAt)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMutationMockRecorder) Create(ctx, db, userID, referenceID, referenceType, amount, createdAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMutation)(nil).Create), ctx, db, userID, referenceID, referenceType, amount, createdAt)
}

// GetBalance mocks base method.
func (m *MockMutation) GetBalance(ctx context.Context, db repo.DB, userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, db, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockMutationMockRecorder) GetBalance(ctx, db, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockMutation)(nil).GetBalance), ctx, db, userID)
}
